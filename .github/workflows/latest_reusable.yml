name: Deploy to AWS ECS

on:
  workflow_call:
    inputs:
      brand_name:
        required: true
        type: string
      repo_name:
        required: true
        type: string
      branch_name:
        required: true
        type: string
      is_mono_repo:
        required: true
        type: string
      is_env:
        required: true
        type: boolean
      environment_variables:
        required: false
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build and Push Docker image
        run: |
          if [ "${{ inputs.is_mono_repo }}" != "false" ]; then
            APP_NAME="${{ inputs.is_mono_repo }}"
          else
            APP_NAME="${{ inputs.repo_name }}"
          fi
          IMAGE_TAG="${{ inputs.brand_name }}-${{ inputs.branch_name }}-${APP_NAME}"
          docker build -t $IMAGE_TAG --build-arg APP_NAME=$APP_NAME .
          # Push the Docker image to your container registry here

      - name: Update ECS service
        if: ${{ inputs.is_env }}
        run: |
          if [ "${{ inputs.is_mono_repo }}" != "false" ]; then
            SERVICE_NAME="${{ inputs.brand_name }}-${{ inputs.branch_name }}-${{ inputs.is_mono_repo }}"
          else
            SERVICE_NAME="${{ inputs.brand_name }}-${{ inputs.branch_name }}-${APP_NAME}"
          fi
          # Update the ECS service with the new image and environment variables
          # Use ${{ inputs.environment_variables }} for the environment variables
