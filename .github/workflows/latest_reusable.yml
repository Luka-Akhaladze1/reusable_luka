# .github/workflows/build-and-deploy.yml
name: Build and Deploy Workflow

on:
  workflow_call:
    inputs:
      repo_name:
        required: true
        type: string
      branch_name:
        required: true
        type: string
      cluster_name:
        required: true
        type: string
      use_build_args:
        required: false
        type: boolean
        default: false
      is_mono_repo:
        required: false
        type: boolean
        default: false
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true
      dynamic_build_args:
        required: false
      ecr_repository:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: 'eu-central-1'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set SERVICE_NAME and Build Arguments
        id: set_service_name_and_build_args
        run: |
          if [ "${{ inputs.is_mono_repo }}" = "true" ]; then
            APP_NAME=$(echo "${{ secrets.dynamic_build_args }}" | cut -d ' ' -f1 | cut -d '=' -f2 | tr '[:upper:]' '[:lower:]')
            SERVICE_NAME="${{ inputs.branch_name }}-${{ inputs.cluster_name }}-${APP_NAME}"
          else
            SERVICE_NAME="${{ inputs.branch_name }}-${{ inputs.cluster_name }}-${{ inputs.repo_name }}"
          fi
          echo "SERVICE_NAME=${SERVICE_NAME}" >> $GITHUB_ENV
          if [ "${{ inputs.use_build_args }}" = "true" ] && [ -n "${{ secrets.dynamic_build_args }}" ]; then
            echo "BUILD_ARGS=${{ secrets.dynamic_build_args }}" >> $GITHUB_ENV
          else
            echo "BUILD_ARGS=" >> $GITHUB_ENV
          fi

      - name: Build and Push Docker image
        run: |
          IMAGE_URI="${{ secrets.ecr_repository }}/${SERVICE_NAME}:latest"
          if [ -n "$BUILD_ARGS" ]; then
            docker build $BUILD_ARGS -t $IMAGE_URI .
          else
            docker build -t $IMAGE_URI .
          fi
          docker push $IMAGE_URI

      - name: Update ECS Service
        run: |
          CLUSTER_NAME="${{ inputs.branch_name }}-${{ inputs.cluster_name }}-cluster"
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment
