name: ECS Deploy

on:
  workflow_call:
    inputs:
      branch-name:
        required: true
        type: string
      repository-name:
        required: true
        type: string
      brand-name:
        required: true
        type: string
      build-envs:
        required: false
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      NPM_TOKEN:
        required: false
      NPM_REGISTRY:
        required: false
        
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set environment variables dynamically
        run: |
          BRANCH_NAME="${{ inputs.branch-name }}"
          REPOSITORY_NAME="${{ inputs.repository-name }}"
          BRAND_NAME="${{ inputs.brand-name }}"
          case "$BRANCH_NAME" in
            "dev")
              ENV="dev"
              CLUSTER_SUFFIX="dev"
              DOMAIN_SUFFIX="dev"
              ;;
            "staging")
              ENV="staging"
              CLUSTER_SUFFIX="staging"
              DOMAIN_SUFFIX="staging"
              ;;
            "main")
              ENV="prod"
              DOMAIN_SUFFIX="app"
              CLUSTER_SUFFIX="prod"
              ;;
            *)
              echo "Unknown branch name: $BRANCH_NAME"
              exit 1
              ;;
          esac
          CLUSTER_NAME="scr-${CLUSTER_SUFFIX}-cluster"
          SERVICE_NAME="scr-${CLUSTER_SUFFIX}-${REPOSITORY_NAME}"

          echo "ENV=$ENV" >> $GITHUB_ENV
          echo "CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_ENV
          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          echo "DOMAIN_SUFFIX=$DOMAIN_SUFFIX" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image to Amazon ECR
        
        run: |
        
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${SERVICE_NAME}:latest \
            --build-arg REACT_APP_CUSTOMER_MANAGEMENT_API_PROXY_URL="https://api.${DOMAIN_SUFFIX}.scroll.codes/customersManage" \
            --build-arg REACT_APP_BRANCHES_VEHICLES_API_PROXY_URL="https://api.${DOMAIN_SUFFIX}.scroll.codes/vehiclesApi" \
            --build-arg REACT_APP_VEHICLES_SOCKET_PROXY="https://ws.${DOMAIN_SUFFIX}.scroll.codes:8006" \
            --build-arg REACT_APP_AUTHORIZATION_API_PROXY_URL="https://sso.staging.tcenter.cloud" \
            --build-arg REACT_APP_VEHICLES_RENTALS_API_PROXY_URL="https://api.${DOMAIN_SUFFIX}.scroll.codes/rentalsApi" .
            
          docker push ${{ steps.login-ecr.outputs.registry }}/${SERVICE_NAME}:latest


      - name: Force new deployment in ECS
        run: |
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment
