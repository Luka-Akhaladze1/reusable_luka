name: Reusable ECS Deployment Workflow

on:
  workflow_call:
    inputs:
      aws_region:
        required: true
        type: string
      ecs_cluster_name:
        required: true
        type: string
      build_args:
        required: false
        type: string
        default: ""
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  build-and-push:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: private

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECS_SERVICE_NAME: ${{ inputs.ecs_cluster_name }}-${{ github.event.repository.name }}-${{ github.repository }}
          ECS_CLUSTER_NAME: '${{ inputs.ecs_cluster_name }}-${{ github.event.repository.name }}-cluster'
          IMAGE_TAG: latest
        run: |
          docker build ${{ inputs.build_args }} -t $ECR_REGISTRY/$ECS_SERVICE_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECS_SERVICE_NAME:$IMAGE_TAG

  deploy:
    name: Deploy to ECS
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to ECS
        env:
          ECS_SERVICE_NAME: ${{ inputs.ecs_cluster_name }}-${{ github.event.repository.name }}-${{ github.repository }}
          ECS_CLUSTER_NAME: '${{ inputs.ecs_cluster_name }}-${{ github.event.repository.name }}-cluster'
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --force-new-deployment
